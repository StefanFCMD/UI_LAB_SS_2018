"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Geolocation = require("nativescript-geolocation");
var router_1 = require("@angular/router");
var app = require("tns-core-modules/application");
var SensorsComponent = /** @class */ (function () {
    function SensorsComponent(router) {
        this.router = router;
        this.latitude = 0;
        this.longitude = 0;
        this.azimuth = 0;
        this.pitch = 0;
        this.roll = 0;
        this.temperature = 0;
        this.magenticX = 0;
        this.magenticY = 0;
        this.magenticZ = 0;
        this.gyroX = 0;
        this.gyroY = 0;
        this.gyroZ = 0;
        this.light = 0;
        this.updateLocation();
    }
    SensorsComponent.prototype.getDeviceLocation = function () {
        return new Promise(function (resolve, reject) {
            Geolocation.enableLocationRequest().then(function () {
                Geolocation.getCurrentLocation({ timeout: 10000 }).then(function (location) {
                    resolve(location);
                }).catch(function (error) {
                    reject(error);
                });
            });
        });
    };
    SensorsComponent.prototype.updateLocation = function () {
        var _this = this;
        this.getDeviceLocation().then(function (result) {
            _this.latitude = result.latitude;
            _this.longitude = result.longitude;
        }, function (error) {
            console.error(error);
        });
    };
    SensorsComponent.prototype.onAccuracyChanged = function (sensor, accuracy) {
        console.log('onAccuracyChanged:', accuracy);
    };
    SensorsComponent.prototype.onSensorChanged = function (event) {
        if (event.sensor.getType() == android.hardware.Sensor.TYPE_ACCELEROMETER) {
            this.azimuth = event.values[0];
            this.pitch = event.values[1];
            this.roll = event.values[2];
            console.log('azimuth', this.azimuth);
            console.log('pitch', this.pitch);
            console.log('roll', this.roll);
        }
        else if (event.sensor.getType() == android.hardware.Sensor.TYPE_AMBIENT_TEMPERATURE) {
            this.temperature = event.values[0];
            console.log('Temperature', event.values[0]);
        }
        else if (event.sensor.getType() == android.hardware.Sensor.TYPE_MAGNETIC_FIELD) {
            this.magenticX = event.values[0];
            this.magenticY = event.values[1];
            this.magenticZ = event.values[2];
            console.log('Magnetic X', event.values[0]);
            console.log('Magnetic Y', event.values[1]);
            console.log('Magnetic Z', event.values[2]);
        }
        else if (event.sensor.getType() == android.hardware.Sensor.TYPE_GYROSCOPE) {
            this.gyroX = event.values[0];
            this.gyroY = event.values[1];
            this.gyroZ = event.values[2];
            console.log('Gyro X', event.values[0]);
            console.log('Gyro Y', event.values[1]);
            console.log('Gyro Z', event.values[2]);
        }
        else if (event.sensor.getType() == android.hardware.Sensor.TYPE_LIGHT) {
            this.light = event.values[0];
            console.log('Light', event.values[0]);
        }
        else {
            //console.log('Other Sensor: ', event.sensor.getType())
        }
    };
    SensorsComponent.prototype.ngOnInit = function () {
        var sensorManager = app.android.foregroundActivity.getSystemService(android.content.Context.SENSOR_SERVICE), accelerometer, temperature, magnetic, gyroscope, light, sensorActivity;
        sensorActivity = new android.hardware.SensorEventListener({
            onAccuracyChanged: this.onAccuracyChanged,
            onSensorChanged: this.onSensorChanged
        });
        accelerometer = sensorManager.getDefaultSensor(android.hardware.Sensor.TYPE_ACCELEROMETER);
        temperature = sensorManager.getDefaultSensor(android.hardware.Sensor.TYPE_AMBIENT_TEMPERATURE);
        magnetic = sensorManager.getDefaultSensor(android.hardware.Sensor.TYPE_MAGNETIC_FIELD);
        gyroscope = sensorManager.getDefaultSensor(android.hardware.Sensor.TYPE_GYROSCOPE);
        light = sensorManager.getDefaultSensor(android.hardware.Sensor.TYPE_LIGHT);
        sensorManager.registerListener(sensorActivity, accelerometer, android.hardware.SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(sensorActivity, temperature, android.hardware.SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(sensorActivity, magnetic, android.hardware.SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(sensorActivity, gyroscope, android.hardware.SensorManager.SENSOR_DELAY_NORMAL);
        sensorManager.registerListener(sensorActivity, light, android.hardware.SensorManager.SENSOR_DELAY_NORMAL);
    };
    SensorsComponent.prototype.openSensors = function () {
        this.router.navigate(["/sensors"]);
    };
    SensorsComponent.prototype.openCamera = function () {
        this.router.navigate(["/camera"]);
    };
    SensorsComponent.prototype.openList = function () {
        this.router.navigate(["/list"]);
    };
    SensorsComponent = __decorate([
        core_1.Component({
            selector: "sensors",
            moduleId: module.id,
            templateUrl: "./sensors.html",
            styleUrls: ["./sensors-common.css", "./sensors.css"],
        }),
        __metadata("design:paramtypes", [router_1.Router])
    ], SensorsComponent);
    return SensorsComponent;
}());
exports.SensorsComponent = SensorsComponent;
//# sourceMappingURL=data:application/json;base64,